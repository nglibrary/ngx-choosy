import { ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit, TemplateRef } from '@angular/core';
import 'rxjs/add/operator/map';
import { Subject } from 'rxjs/Subject';
import { ChoosyConfig, ChoosyDropdownExpose, ChoosyFooterType, ChoosyOption, ChoosyRawOption } from './../../interfaces';
import { ChoosyConfigService } from './../../services/choosy-config/choosy-config.service';
export declare class ChoosyResultsComponent implements OnInit, OnDestroy {
    elRef: ElementRef;
    private configService;
    private cdRef;
    choosy: EventEmitter<any>;
    config: ChoosyConfig;
    options: Array<ChoosyRawOption>;
    template: TemplateRef<any>;
    originalOptions: Array<ChoosyOption>;
    processedOptions: Array<ChoosyOption>;
    selections: Subject<ChoosyRawOption>;
    footerType: ChoosyFooterType;
    optionTpl: TemplateRef<any>;
    isOpen: boolean;
    private results;
    private notifications;
    private resultsSubscription;
    private fuseSearch;
    constructor(elRef: ElementRef, configService: ChoosyConfigService, cdRef: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    open(): void;
    close(): void;
    toggle(): void;
    optionSelectionListener(res: {
        event: Event;
        option: ChoosyOption;
    }): void;
    selectOption(option: ChoosyRawOption): void;
    disableOption(fn: (option: ChoosyRawOption) => boolean): void;
    clearDisabledOption(option: ChoosyRawOption): void;
    clearDisabledOptions(): void;
    addOption(options: ChoosyRawOption | Array<ChoosyRawOption>): void;
    removeOption(fn: (option: ChoosyRawOption) => boolean): void;
    filterOptions(keyword: string): void;
    clearSelectedOption(option: ChoosyRawOption): void;
    clearSelectedOptions(): void;
    optionClicked(event: Event): void;
    getSelectedOptions(): Array<ChoosyRawOption>;
    reloadOptions(options: Array<ChoosyRawOption>): void;
    updateConfig(config: {}): void;
    resetOptions(): void;
    expose(): ChoosyDropdownExpose;
}
